#include <iostream>
#include <vector>
#include <queue>
using namespace std;

bool isBicolorable(vector<int> graph [], int v){
	int colored[v];
	for(int i = 0; i < v; i++) colored[i] = 0;
	queue<int> q;
	q.push(0);
	colored[0] = 1;
	while(!q.empty()){
		int curNode = q.front();
		q.pop();
		for(int i = 0; i < graph[curNode].size(); ++i){
			int nextNode = graph[curNode][i];
			if(colored[nextNode] ==0){
				if(colored[curNode] == 1) colored[nextNode] = 2;
				else colored[nextNode] = 1;
				q.push(nextNode);
			}
			if(colored[curNode] == colored[nextNode]) return false;
		}
	}
	return true;
	}

int main() {
	int v, e;
	while(true){
	 cin  >> v;
	 vector<int> graph[v+1];
	 if (v == 0) break;
	 cin  >> e;
	 int x, y;
	 while(e--){
	 	cin >> x >> y;
	 	graph[x].push_back(y);
	 	graph[y].push_back(x);
	 }
	 cout << (isBicolorable(graph, v) ? "BICOLORABLE." : "NOT BICOLORABLE.") << endl;
	}
	return 0;
}
